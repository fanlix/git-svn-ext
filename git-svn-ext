#!/usr/bin/env python

from commands import getoutput
import os
import re
import sys
import logging

logger = logging.getLogger()
console = logging.StreamHandler()
formatter = logging.Formatter('%(levelname)-8s %(message)s')
console.setFormatter(formatter)
logger.addHandler(console)
logger.level = logging.INFO

# This is so we can change directories but still have a reference
# to ourselves
git_svn_ext_fullpath = os.path.abspath(sys.argv[0])


def list_references():
    """List the references in the local repo.

    Return a tuple with the SHA1 of HEAD and a dictionary with the
    SHA1 of the references as keys and the reference name as value.
    """
    references = getoutput('git show-ref --head')
    HEAD_ref = None
    refs = {}
    for item in references.split('\n'):
        sha1, name = item.split()
        if name == 'HEAD':
            HEAD_ref = sha1
        refs[sha1] = name
    return HEAD_ref, refs


def commit_objects():
    """List commit objects in reverse chronological order.

    Return a dict with the SHA1 of the commits as keys and the SHA1 of
    the parents as values.
    """
    commit_list = getoutput('git rev-list --all --parents')
    commits = {}
    for item in commit_list.split('\n'):
        splitted_item = item.split()
        if len(splitted_item) != 2:
            commit = splitted_item[0]
            parent = None
        else:
            commit, parent = splitted_item
        commits[commit] = parent
    return commits


def find_svn_branch_name():
    """Return the reference name of the current remote branch."""
    head, references = list_references()
    commits = commit_objects()

    current_commit = head
    while current_commit:
        if current_commit in references:
            reference_name = references[current_commit]
            if ('remote' in reference_name or
                'trunk' in reference_name or
                'git-svn' in reference_name):
                logger.debug('Found remote: %s', reference_name)
                return reference_name
        # find the parent of the current commit
        # and make it the next commit to investigate
        if current_commit in commits:
            current_commit = commits[current_commit]
    return None


def find_uncommitted(svn_branch):
    """Given the name of the remote branch, show log of the commits."""
    output = getoutput('git log --pretty="format:%%h %%s" %s..HEAD' %
                       svn_branch)
    if output:
        print 'Possible unpushed commits (against %s):' % svn_branch
        print output
    else:
        print 'No unpushed commits found.'


def update_handler():
    """Update all svn externals"""

    toplevel_directory = getoutput("git rev-parse --show-cdup")

    if toplevel_directory != "":
        print "please run from the toplevel directory"
        sys.exit(1)

    git_ext_dir = ".git_externals"
    if os.path.isdir(git_ext_dir):
        for external in os.listdir(git_ext_dir):
            gitdir = os.path.join(git_ext_dir, external, ".git")
            if os.path.isdir(gitdir):
                dir = os.path.dirname(gitdir)
                if os.path.isdir(dir):
                    current_dir = os.getcwd()
                    os.chdir(dir)
                    print dir
                    os.system("git svn fetch")
                    os.system("git svn rebase")
                    os.chdir(current_dir)


def check_unpushed_handler():
    """Check if a local external has any unpushed changes"""
    status = getoutput('git status')
    if status.startswith('fatal'):
        print status
        sys.exit(1)
    svn_branch = find_svn_branch_name()
    if svn_branch is None:
        print "No svn branch found"
        sys.exit(1)
    logger.debug('Found branch: %s', svn_branch)
    find_uncommitted(svn_branch)


def check_handler():
    """Run check-unpushed for all externals"""
    for dir in os.listdir("."):
        if os.path.isdir(dir) and dir[0] != ".":
            os.chdir(dir)
            status = getoutput("git status")
            unpushed = getoutput(git_svn_ext_fullpath + " check-unpushed")
            if not re.search("clean", status) or not re.search("No unpushed", unpushed):
                print ">>>>>>>>>>>>>>>> %s <<<<<<<<<<<<<<<<" % dir
                os.system("git status")
                os.system(git_svn_ext_fullpath + " check-unpushed")
                print "----------------------------------------"
            else:
                print dir + " is clean"

            os.chdir("..")


# TODO: use a structure that preserves order (for usage)
handler_map = {}
handler_map['update']         = update_handler
handler_map['check-unpushed'] = check_unpushed_handler
handler_map['check']          = check_handler

def usage():
    """Descriptive text of all options"""
    print ""
    print "Usage: " + sys.argv[0] + " [" + "|".join(handler_map.keys()) + "]"
    print ""
    # TODO: would be nice if the docs were aligned
    for k,v in handler_map.items():
        print "  %s: %s" % (k, v.__doc__)
    print ""

if __name__ == '__main__':

    handler = ""

    try:
        sub_command = sys.argv[1]

        if handler_map.has_key(sub_command):
            handler = handler_map[sub_command]
        else:
            raise "Invalid sub command"

    except:
        usage()
        sys.exit(1)

    handler()
